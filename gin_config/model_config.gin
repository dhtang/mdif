# Parameters for input encoder.
MultiresDeepImplicitFunction.input_encoder_params = [
    {'data_type': '3d',
     'net_type': 'fully_conv',
     'num_levels': 3,
     'num_filters': [16, 32, 64],
     'strides': [2, 2, 2],
     'num_conv_per_level': 2,
     'final_pooling': None,
     'num_out_channel': 32,
     'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
     },
]

# Parameters for feature to code net.
MultiresDeepImplicitFunction.feature_to_code_net_params = {
    'data_type': '3d',
    'mode': 'single_dec_branch',
    'out_pre_upsample_id': [0, 1, 2, 3, 4],
    'dec_only_apply_mask': False,
    'unified_mask_config': {
        'spatial_dims': [4, 4, 4],
        'dropout_rate': 0.5,
        'dropout_rescale': True,
    },
    'fusion_params': {
        'mode': 'concat',
    },
    'block_params': [
        [  # Level 0.
            ['EncoderTemplate',
             {'net_type': 'fully_conv',
              'num_levels': 4,
              'num_filters': [256, 256, 256, 256],
              'num_out_channel': 128,
              'strides': [2, 2, 2, 2],
              'num_conv_per_level': 2,
              'kernel_size': [3, 3, 3, 3, 1],
              'final_pooling': None,
              'normalization_params': None,
              'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
              }],
            ['DecoderConv',
             {'num_levels': 5,
              'num_filters': [512, 256, 128, 64, 32],
              'num_out_channel': None,
              'initial_upsample': [False, [8, 8], 'bilinear'],
              'kernel_size': [1, 3, 3, 3, 3, 1],
              'kernel_size_deconv': 4,
              'num_conv_per_level': 2,
              'upsample_type': 'deconv',
              'normalization_params': None,
              'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
              }],
        ],
        [  # Level 1.
            ['EncoderTemplate',
             {'net_type': 'fully_conv',
              'num_levels': 3,
              'num_filters': [256, 256, 256],
              'num_out_channel': 64,
              'strides': [2, 2, 2],
              'kernel_size': [3, 3, 3, 3],
              'num_conv_per_level': 2,
              'final_pooling': None,
              'normalization_params': None,
              'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
              }],
            ['MaskingLayer',
             {'mode': 'random',
              'offset': (0, 0),
              'masked_value': 0,
              'dropout_rate': 0.5,
              'dropout_rescale': False,
              'resize_mode': 'downsample',
              'resize_factor': 2,
              'noise_config': None,
             }],
        ],
        [  # Level 2.
            ['EncoderTemplate',
             {'net_type': 'fully_conv',
              'num_levels': 2,
              'num_filters': [256, 256],
              'num_out_channel': 32,
              'strides': [2, 2],
              'kernel_size': [3, 3, 3],
              'num_conv_per_level': 2,
              'final_pooling': None,
              'normalization_params': None,
              'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
              }],
            ['MaskingLayer',
             {'mode': 'random',
              'offset': (0, 0),
              'masked_value': 0,
              'dropout_rate': 0.5,
              'dropout_rescale': False,
              'resize_mode': 'upsample',
              'resize_factor': 1,
              'noise_config': None,
             }],
        ],
        [  # Level 3.
            ['EncoderTemplate',
             {'net_type': 'fully_conv',
              'num_levels': 1,
              'num_filters': [256],
              'num_out_channel': 16,
              'strides': [2],
              'kernel_size': [3, 3],
              'num_conv_per_level': 2,
              'final_pooling': None,
              'normalization_params': None,
              'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
              }],
            ['MaskingLayer',
             {'mode': 'random',
              'offset': (0, 0),
              'masked_value': 0,
              'dropout_rate': 0.5,
              'dropout_rescale': False,
              'resize_mode': 'upsample',
              'resize_factor': 2,
              'noise_config': None,
             }],
        ],
        [  # Level 4.
            ['EncoderTemplate',
             {'net_type': 'fully_conv',
              'num_levels': 0,
              'num_filters': [],
              'num_out_channel': 8,
              'strides': [],
              'kernel_size': [3],
              'num_conv_per_level': 2,
              'final_pooling': None,
              'normalization_params': None,
              'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
              }],
            ['MaskingLayer',
             {'mode': 'random',
              'offset': (0, 0),
              'masked_value': 0,
              'dropout_rate': 0.5,
              'dropout_rescale': False,
              'resize_mode': 'upsample',
              'resize_factor': 4,
              'noise_config': None,
             }],
        ],
    ],
}

# Parameters for implicit decoder.
MultiresDeepImplicitFunction.decoder_params = {
    'num_filter': 128,
    'num_out_channel': 1,
    'implicit_net_type': 'imnet',
    'share_net_level_groups': None,
    'activation_params': {'type': 'leaky_relu', 'alpha': 0.2},
}

# Point sampling for training.
MultiresDeepImplicitFunction.train_sampling_params = {
    'normalize_coordinates': True,
    'all_pixels': False,
    'untruncated': False,
    'untruncated/num_point': 0,
    'untruncated/mode': 'uniform',
    'untruncated/truncate': 5,
    'regular': False,
    'regular/num_point': 0,
    'global': True,
    'global/num_point': 4096,
    'global/mode': 'uniform',
    'near_surface': True,
    'near_surface/num_point': 4096,
    'near_surface/mode': 'uniform',
}

# Point sampling for evaluation.
MultiresDeepImplicitFunction.eval_sampling_params = {
    'normalize_coordinates': True,
    'all_pixels': True,
    'untruncated': False,
    'untruncated/num_point': 0,
    'untruncated/mode': 'uniform',
    'untruncated/truncate': 5,
    'regular': False,
    'regular/num_point': 0,
    'global': False,
    'global/num_point': 0,
    'global/mode': 'uniform',
    'near_surface': False,
    'near_surface/num_point': 0,
    'near_surface/mode': 'uniform',
}

# Point sampling for latent optimization.
MultiresDeepImplicitFunction.latent_optim_sampling_params = {
    'normalize_coordinates': True,
    'all_pixels': False,
    'untruncated': False,
    'untruncated/num_point': 0,
    'untruncated/mode': 'uniform',
    'untruncated/truncate': 5,
    'regular': False,
    'regular/num_point': 0,
    'global': True,
    'global/num_point': 4096,
    'global/mode': 'uniform',
    'near_surface': True,
    'near_surface/num_point': 4096,
    'near_surface/mode': 'uniform',
}
